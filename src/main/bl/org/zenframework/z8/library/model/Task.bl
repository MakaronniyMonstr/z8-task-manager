import org.zenframework.z8.base.table.value.Link;
import org.zenframework.z8.base.table.value.IntField;
import org.zenframework.z8.base.table.value.DateField;
import org.zenframework.z8.base.table.Table;
import org.zenframework.z8.base.table.system.Users;
import org.zenframework.z8.base.form.Listbox;
import org.zenframework.z8.base.table.value.Field;
import org.zenframework.z8.base.application.Application;


[entry]
[generatable]
[name "Task"]
[displayName "Все задачи"]
public class Task extends Table {
	
	public Project project;
	[name "Project"] 
	public Link projectId = project;
	
	
	public Users creator;
	[name "Creator"]
	public Link creatorId = creator;
	creatorId.defaultValue = Application.user().id;
	
	
	public Users performer;
	[name "Performer"] 
	public Link performerId = performer;
	
	
	public TaskStatus status;
	[name "Status"] 
	public Link statusId = status;
	statusId.defaultValue = TaskStatus.New;
	
	
	public Journal journal;
	
	[displayName "История"]
	public Listbox journalList;
	journalList.query = journal;
	journalList.link = journal.taskId;
	journalList.columns = { journal.user.name, journal.name, journal.value, journal.createdAt };
	journalList.colSpan = 4;
	
	
	[displayName "Сложность"]
	[name "Complexity"] IntField complexity;
	
	[displayName "Выполнить до"]
	[name "PerformBefore"] DateField performBefore;
	
	[displayName "Выполнено"]
	[name "PermormedAt"] DateField performedAt;
	
	[displayName "Создатель"] creator.name;
	[displayName "Исполнитель"] performer.name;
	[displayName "Проект"] project.name;
	[displayName "Наименование"] name;
	[displayName "Описание"] description;
	
	
	names = { project.name, name };
	controls = { name, description, complexity, project.name, creator.name, performer.name, status.name, performBefore, performedAt, journalList };
	columns = { name };
	
	virtual protected void beforeUpdate(guid recordId) {
		super.beforeUpdate(recordId);
		
		if (!readRecord(recordId, Field[] { this.projectId, 
											this.creatorId, 
											this.performerId,
											this.statusId,
											this.description,
											this.complexity,
											this.performBefore,
											this.performedAt })) 
			throw "Запись не существует"; 
		
		if (performedAt.isChanged()) {
			if (statusId.get() == TaskStatus.Completed) {
				throw "Дата выполнения задачи не может быть изменена";
			}
			statusId = TaskStatus.Completed;
		}
	}

	virtual protected void afterUpdate(guid recordId) {
		super.afterUpdate(recordId);
		
		/* Как получить displayName из Field?
		for (Field field : this.fields()) {
			if (field.isChanged()) {
				Application.logInfo("Hi: " + field.primary().toString());
			}
		}
		*/
		
		Journal journal;
		journal.taskId = recordId;
		journal.userId = Application.user().id;
		
		if (this.description.isChanged()) {
			journal.name = "Описание";
			journal.value = this.description.get();
			journal.create();
		}
		if (this.complexity.isChanged()) {
			journal.name = "Сложность";
			journal.value = this.complexity.get();
			journal.create();
		}
		if (this.performBefore.isChanged()) {
			journal.name = "Выполнить до";
			journal.value = "" + this.performBefore.get();
			journal.create();
		}
		if (this.performedAt.isChanged()) {
			journal.name = "Выполнено";
			journal.value = "" + this.performedAt.get();
			journal.create();
		}
		if (this.statusId.isChanged()) {
			journal.name = "Статус";
			journal.value = this.status.name.get();
			journal.create();
		}
		if (this.performerId.isChanged()) {
			journal.name = "Исполнитель";
			journal.value = this.performer.name.get();
			journal.create();
		}
	}
}